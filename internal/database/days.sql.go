// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: days.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createDay = `-- name: CreateDay :one
INSERT INTO days (id, name, user_id, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, name, user_id, created_at, updated_at
`

type CreateDayParams struct {
	ID        uuid.UUID
	Name      string
	UserID    uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) CreateDay(ctx context.Context, arg CreateDayParams) (Day, error) {
	row := q.db.QueryRowContext(ctx, createDay,
		arg.ID,
		arg.Name,
		arg.UserID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Day
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteDays = `-- name: DeleteDays :exec
DELETE FROM days WHERE days.user_id = $1
`

func (q *Queries) DeleteDays(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteDays, userID)
	return err
}

const getDayByNameForUser = `-- name: GetDayByNameForUser :one
SELECT id, name, user_id, created_at, updated_at FROM days
WHERE days.name = $1 AND days.user_id = $2
`

type GetDayByNameForUserParams struct {
	Name   string
	UserID uuid.UUID
}

func (q *Queries) GetDayByNameForUser(ctx context.Context, arg GetDayByNameForUserParams) (Day, error) {
	row := q.db.QueryRowContext(ctx, getDayByNameForUser, arg.Name, arg.UserID)
	var i Day
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getDaysByUser = `-- name: GetDaysByUser :many
SELECT id, name, user_id, created_at, updated_at FROM days
WHERE days.user_id = $1
`

func (q *Queries) GetDaysByUser(ctx context.Context, userID uuid.UUID) ([]Day, error) {
	rows, err := q.db.QueryContext(ctx, getDaysByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Day
	for rows.Next() {
		var i Day
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
